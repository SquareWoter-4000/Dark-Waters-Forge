plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle' version '[6.0,6.2)' apply(false)
	id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
	id("org.spongepowered.mixin") version "0.7-SNAPSHOT" apply(false)
	id "me.modmuss50.mod-publish-plugin" version "0.4.0"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

apply plugin: "net.neoforged.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "java"
apply plugin: "maven-publish"

archivesBaseName  = "${project.modName}-neo-${project.minecraft_version}"

version = project.modVersion
group = project.mavenGroup

mixin {
	add(sourceSets.main, "${mod_id}.refmap.json")

	config("${mod_id}.forge.mixins.json")
}

minecraft {

	mappings channel: 'official', version: project.minecraft_version

	copyIdeResources = true //Calls processResources when in dev

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
	maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://libs.azuredoom.com:4443/mods" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.parchmentmc.org" }
	maven {
		name = "SmartBrainLib (SBL) Maven Repo"
		url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
	}
}

dependencies {
	minecraft "net.neoforged:forge:${project.minecraft_version}-${neo_version}"
	annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

  	implementation fg.deobf("mod.azure.azurelib:azurelib-neo-${project.minecraft_version}:${project.azurelibVersion}")
	implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${project.minecraft_version}:${project.sbl_version}")
	implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-common-${project.minecraft_version}:${project.sbl_version}")
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.1"))



}

processResources {
	def expandProps = [
			"mod_version"               : project.mod_version,
			"group"                     : project.group, //Else we target the task's group.
			"minecraft_version"         : project.minecraft_version,
			"neo_version"               : project.neo_version,
			"loader_version_range"      : project.loader_version_range,
			"neo_version_range"         : project.neo_version_range,
			"minecraft_version_range"   : project.minecraft_version_range,
			"mod_name"                  : project.mod_name,
			"mod_author"                : project.mod_author,
			"mod_id"                    : project.mod_id,
			"mod_license"               : project.mod_license,
			"mod_description"           : project.mod_description,
			"mod_credits"               : project.mod_credits,
			"mod_logo"                  : project.mod_logo,
			"mod_url"                   : project.mod_url,
			"mod_issues"                : project.mod_issues,
			"mod_sources"               : project.mod_sources,
	]

	inputs.property "version", project.version

	filesMatching(['pack.mcmeta','*.mixins.json', 'META-INF/mods.toml']) {
		expand expandProps
	}

	inputs.properties(expandProps)
	doLast {
		def jsonMinifyStart = System.currentTimeMillis()
		def jsonMinified = 0
		def jsonBytesSaved = 0
		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}
		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

jar.finalizedBy('reobfJar')

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}


if (file('key.properties').exists()) {
	publishMods {
		def releaseProp = new Properties()
		File secretPropsFile = file("key.properties")
		releaseProp.load(secretPropsFile.newInputStream())
		file = jar.archiveFile
		changelog = rootProject.file("changelog.txt").text
		type = STABLE
		modLoaders.add("neoforge")
		modLoaders.add("forge")

		curseforge {
			projectId = project.curseforgeID
			projectSlug = project.projectSlug
			accessToken = releaseProp.getProperty("curseKey")
			minecraftVersions.add("${minecraft_version}")
		}
		modrinth {
			projectId = project.modrinthID
			accessToken = releaseProp.getProperty('modrinthKey')
			minecraftVersions.add("${minecraft_version}")
		}
	}
}